# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12LKvbXngG_DqY4TEKhzHJHwn9OHsGO_2
"""

#Bibliotecas utilizadas
import numpy as np
import pandas as pd
import sidetable
import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans, DBSCAN, MeanShift, AgglomerativeClustering
from sklearn.preprocessing import StandardScaler, scale
from sklearn.metrics import silhouette_score, davies_bouldin_score, calinski_harabasz_score
from scipy.cluster.hierarchy import linkage, dendrogram, fcluster
from yellowbrick.cluster import kelbow_visualizer
from sklearn.preprocessing import PowerTransformer

df = pd.read_csv('asset_register.csv', encoding='latin1')

df = df[df['deleted_at'].isnull()]
df['created_at'] = pd.to_datetime(df['created_at'])

df = df.query('value < 100000')
df = df.query('value > 0')

#Agrupando por Ressência, Frequência e Valor
df_rfm = (
  df.groupby('participant_id')
  .agg(
      R = ('created_at', lambda x: (pd.Timestamp.today() - x.max()).days),
      F = ('asset_id', 'nunique'),
      M = ('value', 'mean')
  )
)

styled_df_rfm = df_rfm.style \
    .background_gradient(subset='R', cmap='Reds', low=0.2, high=0.8) \
    .background_gradient(subset='F', cmap='Blues', low=0.2, high=0.8) \
    .background_gradient(subset='M', cmap='Greens', low=0.2, high=0.8) \
    .format(precision=2) \
    .set_caption("Tabela de Segmentação RFM") \
    .set_table_styles([
        {'selector': 'caption', 'props': [('text-align', 'center'), ('font-size', '16px'), ('color', '#333')]},
        {'selector': 'th', 'props': [('border', '1px solid #ddd'), ('font-size', '14px')]}
    ])

df_rfm= df_rfm.query('F < 100000 & M < 20000')
df_rfm = df_rfm.apply(scale).query('F<4')

scaler = PowerTransformer()

df_rfm = pd.DataFrame(scaler.fit_transform(df_rfm), index=df_rfm.index, columns=df_rfm.columns)

df_rfm_clip = df_rfm.apply(lambda x: x.clip(upper=x.quantile(.95)))

df_rfm_clip_scaled = df_rfm_clip.apply(scale)

cluster_metrics = silhouette_score, davies_bouldin_score, calinski_harabasz_score
cluster_metrics_results = []
X = df_rfm_clip_scaled.copy()

for k in range(2,11):
  model = KMeans(n_clusters=k, random_state=0)
  labels = model.fit_predict(X)
  cluster_results_dict = {'k': k}
  cluster_results_dict['inertia'] = model.inertia_
  for metric in cluster_metrics:
    cluster_results_dict[metric.__name__] = metric(X, labels)
  cluster_metrics_results.append(cluster_results_dict)
#pd.DataFrame(cluster_metrics_results).set_index('k').style.background_gradient()

kmeans = KMeans(4)
kmeans_labels = kmeans.fit_predict(df_rfm_clip_scaled)

centers = pd.DataFrame(kmeans.cluster_centers_, columns=df_rfm_clip_scaled.columns)

# Criando o DataFrame dos centros (centroides) dos clusters com os dados do KMeans
centers = pd.DataFrame(kmeans.cluster_centers_, columns=df_rfm_clip_scaled.columns)
centers.index = [f'Cluster {i+1}' for i in range(len(centers))]  # Renomeia os índices para 'Cluster 1', 'Cluster 2', etc.

# Estilizando a tabela para apresentação
Clusters_Table = centers.style \
    .applymap(lambda x: 'color: green' if x > 0 else 'color: red') \
    .background_gradient(cmap='coolwarm', axis=0) \
    .format(precision=2) \
    .set_caption("Tabela de Centros dos Clusters (RFM)") \
    .set_table_styles([
        {'selector': 'caption', 'props': [('text-align', 'center'), ('font-size', '16px'), ('color', '#333')]},
        {'selector': 'th', 'props': [('border', '1px solid #ddd'), ('font-size', '14px')]}
    ])

df_rfm_clip_scaled['Cluster'] = kmeans_labels

# Estilizando a tabela para apresentação
Cluester_Customer_Table = df_rfm_clip_scaled.style \
    .applymap(lambda x: 'color: green' if x > 0 else 'color: red') \
    .background_gradient(cmap='coolwarm', axis=0) \
    .format(precision=2) \
    .set_caption("Tabela de Centros dos Clusters (RFM)") \
    .set_table_styles([
        {'selector': 'caption', 'props': [('text-align', 'center'), ('font-size', '16px'), ('color', '#333')]},
        {'selector': 'th', 'props': [('border', '1px solid #ddd'), ('font-size', '14px')]}
    ])

